// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEventsForDay = `-- name: AddEventsForDay :exec
INSERT INTO student_events (student_id, event_date, order_time, order_cost)
VALUES ($1, $2::DATE, $3, $4)
`

type AddEventsForDayParams struct {
	StudentID int64
	Column2   pgtype.Date
	OrderTime pgtype.Time
	OrderCost int16
}

func (q *Queries) AddEventsForDay(ctx context.Context, arg AddEventsForDayParams) error {
	_, err := q.db.Exec(ctx, addEventsForDay,
		arg.StudentID,
		arg.Column2,
		arg.OrderTime,
		arg.OrderCost,
	)
	return err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
  name, s_class, school, order_day, order_time, order_cost
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, s_class, school, order_day, order_time, order_cost
`

type CreateStudentParams struct {
	Name      string
	SClass    string
	School    string
	OrderDay  int16
	OrderTime pgtype.Time
	OrderCost int16
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRow(ctx, createStudent,
		arg.Name,
		arg.SClass,
		arg.School,
		arg.OrderDay,
		arg.OrderTime,
		arg.OrderCost,
	)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SClass,
		&i.School,
		&i.OrderDay,
		&i.OrderTime,
		&i.OrderCost,
	)
	return i, err
}

const deleteEventsByDate = `-- name: DeleteEventsByDate :exec
DELETE FROM student_events
WHERE event_date = $1
`

func (q *Queries) DeleteEventsByDate(ctx context.Context, eventDate pgtype.Date) error {
	_, err := q.db.Exec(ctx, deleteEventsByDate, eventDate)
	return err
}

const deleteEventsByStudent = `-- name: DeleteEventsByStudent :exec
DELETE FROM student_events
WHERE id = $1
`

func (q *Queries) DeleteEventsByStudent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEventsByStudent, id)
	return err
}

const deleteStudentById = `-- name: DeleteStudentById :exec
DELETE FROM students 
WHERE id = $1
`

func (q *Queries) DeleteStudentById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteStudentById, id)
	return err
}

const getEventsByDate = `-- name: GetEventsByDate :many
SELECT 
    c.id AS student_events_id,
    s.id AS student_id,
    s.name AS student_name,
    c.event_date,
    c.order_time,
    c.order_cost,
    c.order_check
FROM student_events c
JOIN students s ON c.student_id = s.id
WHERE c.event_date = $1
ORDER BY c.order_time
`

type GetEventsByDateRow struct {
	StudentEventsID int64
	StudentID       int64
	StudentName     string
	EventDate       pgtype.Date
	OrderTime       pgtype.Time
	OrderCost       int16
	OrderCheck      pgtype.Bool
}

func (q *Queries) GetEventsByDate(ctx context.Context, eventDate pgtype.Date) ([]GetEventsByDateRow, error) {
	rows, err := q.db.Query(ctx, getEventsByDate, eventDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsByDateRow
	for rows.Next() {
		var i GetEventsByDateRow
		if err := rows.Scan(
			&i.StudentEventsID,
			&i.StudentID,
			&i.StudentName,
			&i.EventDate,
			&i.OrderTime,
			&i.OrderCost,
			&i.OrderCheck,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudentById = `-- name: GetStudentById :one
SELECT id, name, s_class, school, order_day, order_time, order_cost FROM students 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetStudentById(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRow(ctx, getStudentById, id)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.SClass,
		&i.School,
		&i.OrderDay,
		&i.OrderTime,
		&i.OrderCost,
	)
	return i, err
}

const getStudentsById = `-- name: GetStudentsById :many
SELECT id, name, s_class, school, order_day, order_time, order_cost FROM students 
WHERE order_day = $1
`

func (q *Queries) GetStudentsById(ctx context.Context, orderDay int16) ([]Student, error) {
	rows, err := q.db.Query(ctx, getStudentsById, orderDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SClass,
			&i.School,
			&i.OrderDay,
			&i.OrderTime,
			&i.OrderCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudents = `-- name: ListStudents :many
SELECT id, name, s_class, school, order_day, order_time, order_cost FROM students
ORDER BY id
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.Query(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.SClass,
			&i.School,
			&i.OrderDay,
			&i.OrderTime,
			&i.OrderCost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markEventAsChecked = `-- name: MarkEventAsChecked :exec
UPDATE student_events
SET order_check = TRUE
WHERE student_id = $1 AND event_date = $2
`

type MarkEventAsCheckedParams struct {
	StudentID int64
	EventDate pgtype.Date
}

func (q *Queries) MarkEventAsChecked(ctx context.Context, arg MarkEventAsCheckedParams) error {
	_, err := q.db.Exec(ctx, markEventAsChecked, arg.StudentID, arg.EventDate)
	return err
}

const updateStudentById = `-- name: UpdateStudentById :exec
UPDATE students
SET 
  name = $2,
  s_class = $3,
  school = $4,
  order_day = $5,
  order_time = $6,
  order_cost = $7
WHERE id = $1
`

type UpdateStudentByIdParams struct {
	ID        int64
	Name      string
	SClass    string
	School    string
	OrderDay  int16
	OrderTime pgtype.Time
	OrderCost int16
}

func (q *Queries) UpdateStudentById(ctx context.Context, arg UpdateStudentByIdParams) error {
	_, err := q.db.Exec(ctx, updateStudentById,
		arg.ID,
		arg.Name,
		arg.SClass,
		arg.School,
		arg.OrderDay,
		arg.OrderTime,
		arg.OrderCost,
	)
	return err
}
